// n강 for문
package main

import (
	"fmt"
)

func main() {
	// for문 , struct에 대해 알아보자
	// 먼저 make라는 개념을 알아야 한다.
	// make라는 함수는 어떤 값을 주는데, 해당값은 일반 선언으로는 부족해
	// 보통 make함수를 많이 쓴다. new 함수로도 쓸수 있으나, new 함수는 해당 값을
	// 초기화시키지 않다만, make는 리셋, 말그대로 F5를 눌러준다.

	// 해당 코드를 해설해보면 make라는 함수는 어떤 값을 만드렁 주는데,
	// 해당 값은 일반 선언으로는 부족해 보통 make 함수를 많이 쓴다. new 함수로도 쓸 수 있으나
	// new 함수는 해당 값을 초기화 시키지 않다만, make는 리셋, 말그대로 F5를 눌러준다.

	// 해당 코드를 해석해보면 c라는 값을 만든후 make함수를 쓰는데, chan도 타입같고
	// int도 타입 같은데 왜 타입이 뒤에 올까 ? chan이라는 아이는
	// 신기하게도 이것이 가능한데, int라는 타입이 뒤로오니 사실 이 c라는 변수는
	// 일반 변수가 아닌 채널이라는 값 인데, 이 채널은 일반 변수랑은 다르다.

	// 변수는 선언 가능하지만, 이 아이는 그냥 c라는 공간이라고 생각해면 된다.
	// 우리는 이 c라는 공간에 값을 집어넣을 수 있는 것이고, 하지만, 일반변수는
	// 강아지에게 이름을 지어줄 수 있지, 뭐를 더 집어넣을 수 있을까? 아니다

	// 대충 이런 차이를 생각하면 된다.

	// c := make(chan int)
	c := make(chan int)

	// 이딴식으로 짜면 에러가 우리를 반겨준다.
	// 이 채널에서는 무조건 고루틴(go문법)이 나와야 잘 잘동한다.
	// c <- 1

	// 여기서 또 불편한 것이
	// 왜 => 으로 안해? <- 문법을 싫어한다면 안써도 된다.
	// 해당 코드는 <-c이 문법 하나가 살실값을 불러오는 것이다.
	// 이거 말고 2,3e도 넣을 수 있다.
	// 최신순으로 들어온 순서대로
	/*
	  3
	  2
	  1
	  이런식으로 저장된다. 그러면 한개만 가져올떄 가장 최신으로 저장한 3만 가져온다.
	  // 그러면 3개다 가져오려면?
	*/
	go func() {
		c <- 1
		c <- 2
		c <- 3
	}()

	// 그럼 채널의 값을 전송하면 값을 보기라도 해야하는데
	// 이번에는 값을 가져오는 법을 알아보자
	  // 그러면 3개다 가져오려면?
    // 조금 무식한 방법으로 3번 호출해 3번 가져올 수 있다.
	// 그럼 이 코드를 실행하면 원하는 대로 3,2,1 이 나옴


	value := <-c
	value1 := <-c
	value2 := <-c
	fmt.Println(value, value1, value2)

	// go func () {

	// 	// 해당 코드는 c라는 채널에는 int값만 보내준다는 뜨싱다. 그러면 c라는 채널에
	// 	// 값을 전송하는방법을 알아보자.
	// 	c <- 1
	// }
}
